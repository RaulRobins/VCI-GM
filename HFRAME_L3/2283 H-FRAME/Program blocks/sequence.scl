ORGANIZATION_BLOCK "sequence"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_TEMP 
      i : Int;
   END_VAR


BEGIN
	IF "automaticMode" = TRUE AND "currentModel" <> 0 AND "outputs".activeAlarm =  0 THEN
	    IF "currentStep" <= "step".number[0] THEN
	        
	        
	//***********************************************************************************************************************************************************************           
	//***********************************************************************************************************************************************************************                  
	                                               //****ENTRADAS****//
	                                            
	                                       
	        IF ("verificacion_estados_A" = 32) THEN
	                
	            "verificacion_estados_A" := 0;
	            "a_estados" := 0;
	            "a_correctas" := 0;
	                
	          END_IF;
	        
	        
	            IF "verificacion_estados_A" <= 31 THEN
	                
	// INICIO DE CONTEO DE LOS ESTADOS_A.
	                IF "inputs".inputActive["verificacion_estados_A"] = 1 AND "inputs".activeInputsReq["verificacion_estados_A"] = 0 AND "inputs".activeMask["verificacion_estados_A"] = 0 THEN
	                    "a_estados" := "a_estados" + 1;
	                END_IF;
	                
	                IF "inputs".activeInputsReq["verificacion_estados_A"] = 0 AND "inputs".activeMask["verificacion_estados_A"] = 1 THEN
	                    "a_estados" := "a_estados" + 1;
	                END_IF;
	                
	                IF "inputs".activeInputsReq["verificacion_estados_A"] = 1 AND "inputs".activeMask["verificacion_estados_A"] = 0 THEN
	                    "a_estados" := "a_estados" + 1;
	                END_IF;
	                
	                IF "inputs".activeInputsReq["verificacion_estados_A"] = 1 AND "inputs".activeMask["verificacion_estados_A"] = 1 THEN
	                    "a_estados" := "a_estados" + 1;
	                END_IF;
	// INICIO DE CONTEO DE TODOS LOS ESTADOS_A.
	                
	// INICIO DE CONTEO DE ESTADO DE ENTRADAS CORRECTAS.
	                IF "inputs".inputActive["verificacion_estados_A"] = 0 AND "inputs".activeInputsReq["verificacion_estados_A"] = 0 AND "inputs".activeMask["verificacion_estados_A"] = 1 THEN
	                    "a_correctas" := "a_correctas" + 1;
	                END_IF;
	                
	                IF "inputs".inputActive["verificacion_estados_A"] = 0 AND "inputs".activeInputsReq["verificacion_estados_A"] = 1 AND "inputs".activeMask["verificacion_estados_A"] = 1 THEN
	                    "a_correctas" := "a_correctas" + 1;
	                END_IF;
	                
	                IF "inputs".inputActive["verificacion_estados_A"] = 1 AND "inputs".activeInputsReq["verificacion_estados_A"] = 0 AND "inputs".activeMask["verificacion_estados_A"] = 1 THEN
	                    "a_correctas" := "a_correctas" + 1;
	                END_IF;
	                
	                IF "inputs".inputActive["verificacion_estados_A"] = 1 AND "inputs".activeInputsReq["verificacion_estados_A"] = 1 AND "inputs".activeMask["verificacion_estados_A"] = 0 THEN
	                    "a_correctas" := "a_correctas" + 1;
	                END_IF;
	                
	                IF "inputs".inputActive["verificacion_estados_A"] = 1 AND "inputs".activeInputsReq["verificacion_estados_A"] = 1 AND "inputs".activeMask["verificacion_estados_A"] = 1 THEN
	                    "a_correctas" := "a_correctas" + 1;
	                END_IF;
	// FIN DE CONTEO DE ESTADO DE ENTRADAS CORRECTAS.
	                
	                "verificacion_estados_A" := "verificacion_estados_A" + 1;
	            END_IF;
	            
	            
	//***********************************************************************************************************************************************************************           
	//***********************************************************************************************************************************************************************                  
	                                                        //****SALIDAS****//         
	                                                        
	            IF "verificacion_estados_B" = 32 THEN
	                
	                "verificacion_estados_B" := 0;
	                "b_estados" := 0;
	                "numberOfCorrectOutputStates" := 0;
	                
	            END_IF;
	            
	            IF "verificacion_estados_B" <= 31 THEN
	                
	// INICIO DE CONTEO DE LOS ESTADOS_B.
	                IF "outputs".outputsActive["verificacion_estados_B"] = 1 AND "outputs".activeOutputsReq["verificacion_estados_B"] = 0 AND "outputs".activeMask["verificacion_estados_B"] = 0 THEN
	                    "b_estados" := "b_estados" + 1;
	                END_IF;
	                
	                IF "outputs".activeOutputsReq["verificacion_estados_B"] = 0 AND "outputs".activeMask["verificacion_estados_B"] = 1 THEN
	                    "b_estados" := "b_estados" + 1;
	                END_IF;
	                
	                IF "outputs".activeOutputsReq["verificacion_estados_B"] = 1 AND "outputs".activeMask["verificacion_estados_B"] = 0 THEN
	                    "b_estados" := "b_estados" + 1;
	                END_IF;
	                
	                IF "outputs".activeOutputsReq["verificacion_estados_B"] = 1 AND "outputs".activeMask["verificacion_estados_B"] = 1 THEN
	                    "b_estados" := "b_estados" + 1;
	                END_IF;
	// FIN DE CONTEO DE TODOS LOS ESTADOS_B.
	                
	                
	// DESACTIVACIÓN DE SALIDA CUANDO NO ES REQUERIDA.
	                
	                IF "outputs".activeOutputsReq["verificacion_estados_B"] = 0 THEN
	                    "outputs".activateOutput["verificacion_estados_B"] := 0;
	                END_IF;
	                
	            
	// INICIO DE CONTEO DE ESTADO DE "SALIDAS" CORRECTAS.
	                IF "outputs".activeOutputsReq["verificacion_estados_B"] = 0 AND "outputs".activeMask["verificacion_estados_B"] = 1 THEN
	                    "numberOfCorrectOutputStates" := "numberOfCorrectOutputStates" + 1;
	                  
	                END_IF;
	                
	                IF "outputs".activeOutputsReq["verificacion_estados_B"] = 1 AND "outputs".activeMask["verificacion_estados_B"] = 1 THEN
	                    "outputs".activateOutput["verificacion_estados_B"] := 1;
	                    //IF "SALIDAS".TIMER ["verificacion_estados_B"].Q = 1 THEN
	                        "numberOfCorrectOutputStates" := "numberOfCorrectOutputStates" + 1;
	                    // END_IF;
	                END_IF;
	                
	                IF "outputs".activeOutputsReq["verificacion_estados_B"] = 1 AND "outputs".activeMask["verificacion_estados_B"] = 0 THEN
	                    "outputs".activateOutput["verificacion_estados_B"] := 1;
	                   // IF "SALIDAS".TIMER ["verificacion_estados_B"].Q = 1 THEN
	                        IF "outputs".outputsActive["verificacion_estados_B"] = 1 THEN
	                            "numberOfCorrectOutputStates" := "numberOfCorrectOutputStates" + 1;
	                        END_IF;
	                   //END_IF;
	                END_IF;
	                
	// FIN DE CONTEO DE ESTADO DE "SALIDAS" CORRECTAS.
	                
	                "verificacion_estados_B" := "verificacion_estados_B" + 1;
	            END_IF;
	            
	            
	                                                     
	//***********************************************************************************************************************************************************************           
	//***********************************************************************************************************************************************************************                  
	                                                     //****ENTRADAS****//
	                                                     
	            IF "outputs".showTextsOutputs = 0 THEN
	                
	                IF "aa" <= 31 THEN
	                    
	// INICIO DE COMPARACIONES DE DETECCIÓN DE SEÑALES DE ENTRADAS FALTANTES O SOBRANTES.  
	                    IF ("inputs".activeMask["aa"] = 1) OR (("inputs".activeInputsReq["aa"] = 1) AND ("inputs".inputActive["aa"] = 1)) OR (("inputs".activeInputsReq["aa"] = 0) AND ("inputs".inputActive["aa"] = 0)) THEN
	                        "aa" := "aa" + 1;
	                        IF "aa" = 32 THEN
	                            "aa" := 0;
	                            "outputs".showTextsOutputs := 1;
	                        END_IF;
	                    END_IF;
	                    
	                    IF ("inputs".activeMask["aa"] = 0) AND "inputs".activeInputsReq["aa"] = 1 AND "inputs".inputActive["aa"] = 0 THEN
	                        
	                        IF "allowedTextChange" = 0 THEN
	                            "hmi".operatorTextIndicator := CONCAT(IN1 := 'ESPERANDO POR ', IN2 := "inputs".inputText["aa"]);
	                            "aa" := "aa" + 1;
	                            IF "aa" = 32 THEN
	                                "aa" := 0;
	                                "outputs".showTextsOutputs := 1;
	                            END_IF;
	                        END_IF;
	                        
	                    END_IF;
	                    
	                    IF ("inputs".activeMask["aa"] = 0) AND "inputs".activeInputsReq["aa"] = 0 AND "inputs".inputActive["aa"] = 1 THEN
	                        
	                        IF "allowedTextChange" = 0 THEN
	                            "hmi".operatorTextIndicator := CONCAT(IN1 := 'ESPERANDO POR NO ', IN2 := "inputs".inputText["aa"]);
	                            "aa" := "aa" + 1;
	                            IF "aa" = 32 THEN
	                                "aa" := 0;
	                                "outputs".showTextsOutputs := 1;
	                            END_IF;
	                        END_IF;
	                        
	                    END_IF;
	//FIN DE COMPARACIONES DE DETECCIÓN DE SEÑALES DE ENTRADAS FALTANTES O SOBRANTES. 
	                    
	                    
	                END_IF;
	            END_IF;
	            
	        
	        
	//***********************************************************************************************************************************************************************           
	//***********************************************************************************************************************************************************************                  
	                                                    //****SALIDAS****//
	                                                   
	            IF "outputs".showTextsOutputs = 1 THEN
	                
	                IF "bb" <= 31 THEN
	                    
	// INICIO DE COMPARACIONES DE DETECCIÓN DE SEÑALES DE SALIDAS FALTANTES O SOBRANTES.  
	                    IF ("outputs".activeMask["bb"] = 1) OR (("outputs".activeOutputsReq["bb"] = 1) AND ("outputs".outputsActive["bb"] = 1)) OR (("outputs".activeOutputsReq["bb"] = 0) AND ("outputs".outputsActive["bb"] = 0)) THEN
	                        "bb" := "bb" + 1;
	                        IF "bb" = 32 THEN
	                           "bb" := 0;
	                           "outputs".showTextsOutputs := 0;
	                        END_IF;
	                    END_IF;
	                    
	                    IF ("outputs".activeMask["bb"] = 0) AND "outputs".activeOutputsReq["bb"] = 1 AND "outputs".outputsActive["bb"] = 0 THEN
	                        
	                        IF "allowedTextChange" = 0 THEN
	                            "hmi".operatorTextIndicator := CONCAT(IN1 := 'ESPERANDO POR ', IN2 := "outputs".text["bb"]);
	                            "bb" := "bb" + 1;
	                            IF "bb" = 32 THEN
	                                "bb" := 0;
	                                "outputs".showTextsOutputs := 0;
	                            END_IF;
	                        END_IF;
	                        
	                    END_IF;
	                    
	                    IF ("outputs".activeMask["bb"] = 0) AND "outputs".activeOutputsReq["bb"] = 0 AND "outputs".outputsActive["bb"] = 1 THEN
	                        
	                        IF "allowedTextChange" = 0 THEN
	                            "hmi".operatorTextIndicator := CONCAT(IN1 := 'ESPERANDO POR NO ', IN2 := "outputs".text["bb"]);
	                            "bb" := "bb" + 1;
	                            IF "bb" = 32 THEN
	                                "bb" := 0;
	                                "outputs".showTextsOutputs := 0;
	                            END_IF;
	                        END_IF;
	                        
	                    END_IF;
	// FIN DE COMPARACIONES DE DETECCIÓN DE SEÑALES DE SALIDAS FALTANTES O SOBRANTES. 
	
	                END_IF;
	            END_IF;
	                                                    
	                                                    
	                                                    
	//***********************************************************************************************************************************************************************           
	//***********************************************************************************************************************************************************************                  
	                                                    //****CAMBIO DE PASO****//
	                                                    
	                                                    
	               
	            IF (("a_correctas" = "a_estados") AND ("a_correctas" <> 0) AND ("a_estados" <> 0) AND ("numberOfCorrectOutputStates" = "b_estados") AND ("numberOfCorrectOutputStates" <> 0) AND ("b_estados" <> 0) AND ("verificacion_estados_B" = 32) AND ("verificacion_estados_A" = 32)) OR (("inputs".inputSequence[0, "currentStep"] = 0) AND ("inputs".maskSequence[0, "currentStep"] = 0) AND ("inputs".activeInputsReqDInt = 0) AND ("verificacion_estados_A" = 32)) OR (("a_correctas" = "a_estados") AND ("a_correctas" <> 0) AND ("a_estados" <> 0) AND ("verificacion_estados_A" = 32) AND ("outputs".outputSequence[0, "currentStep"] = 0) AND ("outputs".maskSequence[0, "currentStep"] = 0) AND ("outputs".active = 0)) THEN
	                
	                "hmi".operatorTextIndicator := ' ';
	                
	                "step".stepChangeTimerStart := 1;
	                
	                IF "step".counterDone = 1 THEN
	                    "step".stepChangeTimerStart := 0;
	                END_IF;
	                
	                IF ("step".counterDone = 1 OR "step".stepChangeTimer = 0) THEN
	                    
	                    IF "currentStep" = "step".number[0] THEN
	                        IF "currentStep" <> 0 AND "step".number[0] <> 0 THEN
	                            "hmi".cicles := "hmi".cicles + 1;
	                            
	                            IF "shift1" THEN
	                                "hmi".production1 := "hmi".production1 + 1;
	                            END_IF;
	                            
	                            IF "shift2" THEN
	                                "hmi".production2 := "hmi".production2 + 1;
	                            END_IF;
	                            
	                            IF "shift3" THEN
	                                "hmi".production3 := "hmi".production3 + 1;
	                            END_IF;
	                            
	                            
	                        END_IF;
	                        "currentStep" := 0;
	                        RETURN;
	                    END_IF;
	                    
	                    "currentStep" := "currentStep" + 1;
	                   
	                END_IF;
	                
	                
	            END_IF;
	            
	            
	            
	        END_IF;
	      END_IF;
	      
	      
END_ORGANIZATION_BLOCK

