FUNCTION_BLOCK "Camera"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Command_Control_Address : HW_IO;
      Command_Status_Bits_Address : HW_IO;
      Device_Result_Bits_Address : HW_IO;
      Device_Status_Words_Address : HW_IO;
      Device_Statistics_Address : HW_IO;
      Position_Adjust_Result_Address : HW_IO;
   END_VAR

   VAR_IN_OUT 
      data : "UDT_Camera_Keyence_IV";
   END_VAR

   VAR 
      state : Int;
      OKCount : Int;
      NOKCount : Int;
      Command_Control : Struct
         Trigger_request : Bool;
         Master_registration_request : Bool;
         Program_switching_request : Bool;
         Warning_clear_request : Bool;
         Statistics_reset_request : Bool;
         Buffer_clear_request : Bool;
         reserve1 : Bool;
         reserve2 : Bool;
         reserve3 : Bool;
         reserve4 : Bool;
         reserve5 : Bool;
         reserve6 : Bool;
         reserve7 : Bool;
         reserve8 : Bool;
         reserve9 : Bool;
         reserve10 : Bool;
         Result_acquisition_complete_notification : Bool;
         reserve11 : Bool;
         reserve12 : Bool;
         reserve13 : Bool;
         reserve14 : Bool;
         reserve15 : Bool;
         reserve16 : Bool;
         reserve17 : Bool;
         reserve18 : Bool;
         reserve19 : Bool;
         reserve20 : Bool;
         reserve21 : Bool;
         reserve22 : Bool;
         reserve23 : Bool;
         reserve24 : Bool;
         reserve25 : Bool;
         ProgramNumber : UInt;
         reserve : Array[1..6] of Byte;
      END_STRUCT;
      Command_Status_Bits : Struct
         Trigger_response : Bool;
         Master_registration_response : Bool;
         Program_switching_response : Bool;
         Warning_clear_response : Bool;
         Statistics_reset_response : Bool;
         Buffer_clear_response : Bool;
         reserve1 : Bool;
         reserve2 : Bool;
         Trigger_failed : Bool;
         Master_registration_failed : Bool;
         Program_switching_failed : Bool;
         reserve3 : Bool;
         reserve4 : Bool;
         reserve5 : Bool;
         reserve6 : Bool;
         reserve7 : Bool;
         Result_available : Bool;
         Result_update_complete : Bool;
         BUSY : Bool;
         Imaging_status : Bool;
         RUN : Bool;
         Ready : Bool;
         reserve8 : Bool;
         reserve9 : Bool;
         reserve10 : Bool;
         reserve11 : Bool;
         reserve12 : Bool;
         reserve13 : Bool;
         reserve14 : Bool;
         Buffer_overrun : Bool;
         Warning : Bool;
         Error : Bool;
      END_STRUCT;
      Device_Result_Bits : Struct
         Overall_judgment : Bool;
         Position_correction : Bool;
         LOGIC1 : Bool;
         LOGIC2 : Bool;
         LOGIC3 : Bool;
         LOGIC4 : Bool;
         Overall_judgment_NG : Bool;
         reserve1 : Bool;
         reserve2 : Bool;
         reserve3 : Bool;
         reserve4 : Bool;
         reserve5 : Bool;
         reserve6 : Bool;
         reserve7 : Bool;
         reserve8 : Bool;
         Tool : Array[1..16] of Bool;
      END_STRUCT;
      Device_Status_Words : Struct
         Error_No : UInt;
         Warning_No : UInt;
         Nimber_of_remaining_buffers : UInt;
         Checksum : UInt;
         Current_program : UInt;
         Program_No_during_judgment : UInt;
         Result_No : UInt;
         Processing_time : UInt;
      END_STRUCT;
      IEC_Timer_0_zmenaProgramu {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      IEC_Timer_0_Instance {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      ton_NextTry {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      Result_update_complete_mem { S7_SetPoint := 'True'} : Bool;
      Trigger_request_mem : Bool;
      R_TRIG_Instance {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      IEC_Timer_Results_timeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
   END_VAR

   VAR_TEMP 
      retValTmp : Int;
      i : Int;
   END_VAR


BEGIN
	#retValTmp := DPRD_DAT(LADDR := #Command_Status_Bits_Address, RECORD => #Command_Status_Bits);
	#retValTmp := DPRD_DAT(LADDR := #Device_Result_Bits_Address, RECORD => #Device_Result_Bits);
	#retValTmp := DPRD_DAT(LADDR := #Device_Status_Words_Address, RECORD => #Device_Status_Words);
	
	#Command_Control.ProgramNumber := SINT_TO_UINT(#data.ProgramNumber);
	#data.ProgramOK := #Command_Control.ProgramNumber = #Device_Status_Words.Current_program;
	#Command_Control.Program_switching_request := NOT #data.ProgramOK AND "Clock_10Hz";
	#IEC_Timer_0_zmenaProgramu(IN := NOT #data.ProgramOK,
	                           PT := t#10s,
	                           Q => #data.ProgramChangeNOK);
	
	#Command_Control.Trigger_request := #data.Start AND #data.ProgramOK AND "Clock_10Hz";
	#R_TRIG_Instance(CLK:=#Command_Control.Trigger_request);
	IF #R_TRIG_Instance.Q (*OR NOT #data.Start*) THEN
	    #data.Result := 0;
	END_IF;
	
	REGION #init tool results
	    IF NOT #data.ProgramOK THEN
	        FOR #i := 1 TO 16 DO
	            #data.Tool[#i] := FALSE;
	        END_FOR;
	        #data.Result := 0;
	        #data.ResultReadyAfterChange := FALSE;
	    END_IF;
	END_REGION
	
	#IEC_Timer_Results_timeout(IN := #Command_Status_Bits.Result_update_complete = #Result_update_complete_mem,
	                           PT := t#300ms);
	IF #IEC_Timer_Results_timeout.Q THEN
	    #data.Result := 0;
	END_IF;
	
	REGION read tool results
	    IF #Command_Status_Bits.Result_update_complete <> #Result_update_complete_mem AND #data.ProgramOK THEN
	        #data.Tool := #Device_Result_Bits.Tool;
	        IF #Device_Result_Bits.Overall_judgment THEN
	            #data.Result := 1;
	        ELSE
	            #data.Result := -1;
	        END_IF;
	        #data.ResultReadyAfterChange := TRUE;
	    END_IF;
	END_REGION
	
	    
	#Result_update_complete_mem := #Command_Status_Bits.Result_update_complete;
	#Trigger_request_mem := #Command_Control.Trigger_request;
	
	#retValTmp := DPWR_DAT(LADDR := #Command_Control_Address, RECORD := #Command_Control);
	
END_FUNCTION_BLOCK

