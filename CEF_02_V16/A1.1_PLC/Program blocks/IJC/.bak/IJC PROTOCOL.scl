FUNCTION_BLOCK "IJC PROTOCOL"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : RAUL_ROBINS
VERSION : 0.1
   VAR_INPUT RETAIN
      M_TYPE : String[3];
      M_NBR : DInt;
   END_VAR
   VAR_INPUT 
      DB_REC : DB_ANY;
      DB_SEND : DB_ANY;
      START_MSG : Bool;
      KANBAN : String[30];
      SAP_PN : String[16];
      COMPONENT : String[64];
      START_SCREW : Bool;
      "SCREW T_INT" : Word;
      "SCREW T_FLOAT" : Word;
      "SCREW ANGLE" : Word;
      ERR_RESET : Bool;
      PROCESS_STATUS { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : SInt;
      NUM_OF_PROCESS : SInt;
   END_VAR

   VAR_OUTPUT 
      SEQ_STEP : Int;
      DN : Bool;
      FLT : Bool;
      ANS : SInt;
      A_TMOUT : Bool;
      M_TMOUT : Bool;
      NFP : String[8];
   END_VAR

   VAR_IN_OUT 
      AWAKE_SW : Int;
   END_VAR

   VAR 
      MSG_TMOUT {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      AWK_TMR {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      AWK_TMOUT {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      "SCREW NBR" { S7_SetPoint := 'True'} : Word;
      SCREW : Array[1..9] of Struct
         ANGLE : Word;
         TORQUE : Struct
            "INT" : Word;
            FLOAT : Word;
         END_STRUCT;
      END_STRUCT;
      HMI : Struct
         SEND : Struct
            MSG : String[50];
            SW : SInt;
         END_STRUCT;
         RCV : Struct
            MSG : String[50];
            SW : SInt;
         END_STRUCT;
      END_STRUCT;
      ONS : Array[1..10] of Bool;
   END_VAR

   VAR_TEMP 
      MSG_TYPE : SInt;
      IDB : Int;
      i : Int;
      j : Int;
      k : Int;
      SEND_OFFSET : Struct
         SW : DInt;
         MSG : DInt;
      END_STRUCT;
      REC_OFFSET : Struct
         SW : DInt;
         ANS : DInt;
         MSG : DInt;
      END_STRUCT;
      CNT : SInt;
      CNT_STR : String[2];
      TMP : Word;
      BTEST : Bool;
      STATUS : Char;
      NUMBER : Char;
      CHAR_ARRAY : Array[0..49] of Char;
   END_VAR

   VAR CONSTANT 
      "DB" : Byte := 16#84;
      CLEAR : Word := 16#0;
      MINUS1 : Word := 16#FFFF;
      PLUS1 : Word := 16#1;
   END_VAR


BEGIN
	(*     IJCORE PROTOCOL
	CREATED BY: RAUL ROBINS
	CREATED ON: 08/05/2020
	VERSION: 1.0
	*)
	
	//***** CLEAR ALL FAULTS ***************************************
	IF #ERR_RESET OR
	NOT #START_MSG THEN
	    #M_TMOUT := false;
	    #FLT := FALSE;
	END_IF;
	
	//***** AWAKE SIGNAL ***************************************
	  //#AWK_TMR(IN := (#AWAKE_SW <= 0),
	  //      PT := T#500ms);
	
	//IF #AWK_TMR.Q AND
	  //  #AWAKE_SW <= 1 THEN
	   // #AWAKE_SW := 1;
	//END_IF;
	
	
	//AWAKE TIMEOUT
	//#AWK_TMOUT(IN := (#AWAKE_SW = 1),
	  //      PT := T#6S);
	//IF #AWK_TMOUT.Q THEN
	    //#A_TMOUT := TRUE;
	//ELSIF (#AWAKE_SW < 0) THEN
	  //  #A_TMOUT := FALSE;
	//END_IF;
	
	// ***** TIMEOUT FOR ANSWER FROM IJC **********************************
	// WAITMOUNT FOR FAULT
	// 
	#MSG_TMOUT(IN := (#SEQ_STEP = 50 OR #SEQ_STEP = 60),
	           PT := T#60S,
	           Q => #BTEST);
	//SET FAULT
	 IF #MSG_TMOUT.Q THEN
	     #M_TMOUT := true;
	     #SEQ_STEP := 0;
	END_IF;
	
	//***** VALID MESSAGE NUMBER ***************************************
	IF #M_NBR < 1 THEN
	    RETURN;
	END_IF;
	
	//***** MESSAGE TYPE SELECTED ***************************************
	IF    #M_TYPE = 'CNF' THEN
	    #MSG_TYPE := 1;
	ELSIF #M_TYPE = 'TRC' THEN
	    #MSG_TYPE := 1;
	ELSIF #M_TYPE = 'TRB' THEN
	    #MSG_TYPE := 1;
	ELSIF #M_TYPE = 'TRS' THEN
	    #MSG_TYPE := 2;
	ELSIF #M_TYPE = 'TRI' THEN
	    #MSG_TYPE := 3;
	ELSIF #M_TYPE = 'TRE' THEN
	    #MSG_TYPE := 4;
	ELSIF #M_TYPE = 'STA' THEN
	    #MSG_TYPE := 5;
	ELSIF #M_TYPE = 'CMA' THEN
	    #MSG_TYPE := 6;
	ELSIF #M_TYPE = 'TRR' THEN
	    #MSG_TYPE := 7;
	ELSIF #M_TYPE = 'TRW' THEN
	    #MSG_TYPE := 8;
	ELSIF #M_TYPE = 'PFC' THEN
	    #MSG_TYPE := 9;
	ELSIF #M_TYPE = 'NFP' THEN
	    #MSG_TYPE := 10;
	ELSE
	    RETURN;
	END_IF;
	
	//***** MESSAGE OFFSET CALC ***************************************
	#SEND_OFFSET.SW := (#M_NBR * 2) + 2;
	#SEND_OFFSET.MSG := ((#M_NBR - 1) * 80) + 604;
	#REC_OFFSET.SW := (#M_NBR - 1) * 2;
	#REC_OFFSET.ANS := ((#M_NBR - 1) * 32) + 600;
	#REC_OFFSET.MSG := ((#M_NBR - 1) * 32) + 602;
	#HMI.SEND.SW := WORD_TO_SINT(PEEK_WORD(area := #DB, dbNumber := #DB_SEND, byteOffset := #SEND_OFFSET.SW));
	#HMI.RCV.SW := WORD_TO_SINT(PEEK_WORD(area := #DB, dbNumber := #DB_REC, byteOffset := #REC_OFFSET.SW));
	
	//***** GET SCREW DATA ***************************************
	
	//CLEAR SCREW DATA*************************************************
	// IF NOT #START_SCREW THEN
	//     #"SCREW NBR" := 0;
	//     FOR #i := 1 TO 9 BY 1 DO
	//         #SCREW[#i].TORQUE."INT" := 0;
	//         #SCREW[#i].TORQUE.FLOAT := 0;
	//         #SCREW[#i].ANGLE := 0;
	//     END_FOR;
	// END_IF;
	
	// IF  #START_SCREW   AND
	//     #"SCREW ANGLE" > 0 AND
	//     #"SCREW NBR"< 9 THEN
	//     IF NOT #ONS[2] THEN
	//         #"SCREW NBR" += 1;
	//         #SCREW[#"SCREW NBR"].TORQUE."INT" := #"SCREW T_INT";
	//         #SCREW[#"SCREW NBR"].TORQUE.FLOAT := #"SCREW T_FLOAT";
	//         #SCREW[#"SCREW NBR"].ANGLE := #"SCREW ANGLE";
	// //ONE SHOT
	//         #ONS[2] := True;
	//     END_IF;
	// ELSE
	//     #ONS[2] := False;
	// END_IF;
	#"SCREW NBR" := SINT_TO_WORD(#NUM_OF_PROCESS);
	
	
	////////////////////////////////////////////////////////////////////
	//START IJCORE SEQUENCE
	//>>>>>STEP-00 ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	//WAIT FLAG SEND TO START SEQUENCE
	
	IF  NOT #START_MSG THEN
	    #DN := FALSE;
	    #SEQ_STEP := 0;
	    #ANS := 0;
	    //MESSAGE
	    FOR #i := 0 TO 79 DO
	        POKE(area := #DB,
	             dbNumber := #DB_SEND,
	             byteOffset := (#SEND_OFFSET.MSG + #i),
	             value := ' ');
	    END_FOR;
	    //SW_MESSAGE
	    POKE(area := #DB,
	         dbNumber := #DB_SEND,
	         byteOffset := #SEND_OFFSET.SW,
	         value := #CLEAR);
	ELSE
	    //***** HMI SIGNAL STATUS ***************************************
	    //SEND
	    FOR #i := 0 TO 49 BY 1 DO
	        #CHAR_ARRAY[#i] := BYTE_TO_CHAR(PEEK(area := #DB, dbNumber := #DB_SEND, byteOffset := #SEND_OFFSET.MSG + #i));
	    END_FOR;
	    
	    Chars_TO_Strg(Chars := #CHAR_ARRAY,
	                  pChars := 0,
	                  Cnt := 50,
	                  Strg => #HMI.SEND.MSG);
	    
	    
	    //NFP
	    //
	    
	    // #NFP := '';
	
	    // RETURN;
	END_IF;
	
	
	//***** HMI SIGNAL STATUS ***************************************
	//SEND
	//FOR #i := 0 TO 49 BY 1 DO
	  //  #CHAR_ARRAY[#i] := BYTE_TO_CHAR(PEEK(area := #DB, dbNumber := #DB_SEND, byteOffset := #SEND_OFFSET.MSG + #i));
	//END_FOR;
	
	//Chars_TO_Strg(Chars := #CHAR_ARRAY,
	  //            pChars := 0,
	    //          #CNT := 50,
	      //        Strg => #HMI.SEND.MSG);
	
	
	//HMI REC
	FOR #i := 0 TO 49 BY 1 DO
	    #CHAR_ARRAY[#i] := BYTE_TO_CHAR(PEEK(area := #DB, dbNumber := #DB_REC, byteOffset := #REC_OFFSET.MSG + #i));
	END_FOR;
	
	Chars_TO_Strg(Chars := #CHAR_ARRAY,
	              pChars := 0,
	              Cnt := 50,
	              Strg => #HMI.RCV.MSG);
	
	//***** START SEQUENCE ***************************************
	IF #SEQ_STEP = 0 AND #SEQ_STEP<>100 AND 
	    #START_MSG THEN
	    #SEQ_STEP := 10;
	END_IF;
	
	//>>>>>STEP-10 ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	//TURN OFF SEND FLAG
	IF #SEQ_STEP = 10 AND #SEQ_STEP<>100 AND  #START_MSG THEN
	    //GOTO STEP 30
	    #SEQ_STEP := 30;
	END_IF;
	
	//>>>>>STEP-30 ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	//INIT DATA DB5 or DB1005 
	IF #SEQ_STEP = 30 THEN
	    //SET FLAGS TO 0
	    POKE(area := #DB,
	         dbNumber := #DB_SEND,
	         byteOffset := #SEND_OFFSET.SW,
	         value := #CLEAR);
	    POKE(area := #DB,
	         dbNumber := #DB_REC,
	         byteOffset := #REC_OFFSET.SW,
	         value := #CLEAR);
	    POKE(area := #DB,
	         dbNumber := #DB_REC,
	         byteOffset := #REC_OFFSET.ANS,
	         value := #CLEAR);
	    
	    //CLEAR DBSEND MESSAGE
	    FOR #i := 0 TO 79 BY 1 DO
	        POKE(area := #DB,
	             dbNumber := #DB_SEND,
	             byteOffset := (#SEND_OFFSET.MSG + #i),
	             value := ' ');
	    END_FOR;
	    FOR #i := 0 TO 69 BY 1 DO
	        POKE(area := #DB,
	             dbNumber := #DB_REC,
	             byteOffset := (#REC_OFFSET.MSG + #i),
	             value := ' ');
	    END_FOR;
	    //GO TO STEP 40
	    #SEQ_STEP := 40;
	END_IF;
	
	//>>>>>STEP-40 ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	//CREATE MESSAGE
	IF #SEQ_STEP = 40 THEN
	    //MESSAGE TYPE
	   
	    //COPY KANBAN
	    FOR #i := 0 TO 7 BY 1 DO
	        POKE(area := #DB,
	             dbNumber := #DB_SEND,
	             byteOffset := (#SEND_OFFSET.MSG + #i),
	             value := #KANBAN[#i+1]);
	    END_FOR;
	    
	    //CONVERT DATATYPE
	    #STATUS := SINT_TO_CHAR(#PROCESS_STATUS + 48);
	    #NUMBER := SINT_TO_CHAR(#NUM_OF_PROCESS + 48);
	    
	    CASE #MSG_TYPE OF
	        1://CNF & TRC
	            #CNT := INT_TO_SINT (LEN(#COMPONENT));
	            VAL_STRG(IN := #CNT,
	                     SIZE := 2,
	                     PREC := 0,
	                     FORMAT := W#16#0,
	                     P := 1,
	                     OUT => #CNT_STR);
	            IF #CNT < 10 THEN
	                #CNT_STR := REPLACE(IN1 := #CNT_STR, IN2 := '0',
	                                    L := 1,
	                                    P := FIND(IN1 := #CNT_STR,
	                                              IN2 := ' '));
	            END_IF;
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 8),
	                 value := #CNT_STR[1]);
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 9),
	                 value := #CNT_STR[2]);
	            FOR #i := 0 TO 28 BY 1 DO
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + #i + 10),
	                     value := #COMPONENT[#i+1]);
	            END_FOR;
	            
	        2://TRS
	            #NUMBER := WORD_TO_CHAR(#"SCREW NBR" + 48);
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 8),
	                 value := #STATUS);
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 9),
	                 value := #NUMBER);
	            FOR #i := 0 TO 8 BY 1 DO
	                #j := #i + 1;
	                #k := (#i * 6) + 10;
	                //ANGLE
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + #k ),
	                     value :=  #SCREW[#j].ANGLE);
	                //TORQUE BEFORE POINT
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + #k + 2),
	                     value := #SCREW[#j].TORQUE."INT");
	        
	                //TORQUE AFTER POINT
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + #k + 4),
	                     value := #SCREW[#j].TORQUE."FLOAT");
	            END_FOR;
	            
	        3://TRI
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 8),
	                 value := #STATUS);
	        4://TRE 
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 8),
	                 value := '9');;
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 9),     
	                 value := '9');                                 
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 10),
	                 value := #STATUS);
	        5://STA
	            ;
	        6://TRB
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 9),
	                 value := '1');;
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 10),
	                 value := '6');
	            FOR #i := 1 TO 16 BY 1 DO
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + #i + 1),
	                     value := #SAP_PN[#i]);
	            END_FOR;
	            ;
	        7://TRR
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 8),
	                 value := #STATUS);
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 9),
	                 value := #NUMBER);
	            
	        8://TRW
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 8),
	                 value := #STATUS);
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 9),
	                 value := #NUMBER);
	            
	        9://PFC
	            #CNT := INT_TO_SINT(LEN(#COMPONENT));
	            VAL_STRG(IN := #CNT,
	                     SIZE := 2,
	                     PREC := 0,
	                     FORMAT := W#16#0,
	                     P := 1,
	                     OUT => #CNT_STR);
	            IF #CNT < 10 THEN
	                #CNT_STR := REPLACE(IN1 := #CNT_STR, IN2 := '0',
	                                    L := 1,
	                                    P := FIND(IN1 := #CNT_STR,
	                                              IN2 := ' '));
	            END_IF;
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 8),
	                 value := #CNT_STR[1]);
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 9),
	                 value := #CNT_STR[2]);
	            FOR #i := 0 TO 28 BY 1 DO
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + #i + 10),
	                     value := #COMPONENT[#i + 1]);
	            END_FOR;
	        10://NFP
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG),
	                 value := '0');
	            POKE(area := #DB,
	                 dbNumber := #DB_SEND,
	                 byteOffset := (#SEND_OFFSET.MSG + 1),
	                 value := '8');
	            FOR #i := 1 TO 8 BY 1 DO
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + #i + 1),
	                     value := #KANBAN[#i]);
	            END_FOR;
	    END_CASE;
	    
	    //SET FLAG TO I TO INFORM THAT PLC IS READY (DB5 Ó 1005)
	    POKE(area := #DB,
	         dbNumber := #DB_SEND,
	         byteOffset := #SEND_OFFSET.SW,
	         value := #PLUS1);
	   #SEQ_STEP := 50;
	END_IF;
	
	//***** WAIT ANSWER FROM IJC***** **********************************
	//CHECK FLAG IN STEP-50
	IF #SEQ_STEP = 50 THEN
	    //WAIT FOR SEND FLAG TO BE -1
	    IF PEEK_WORD(area := #DB, dbNumber := #DB_SEND, byteOffset := #SEND_OFFSET.SW) = #MINUS1 THEN
	        #SEQ_STEP := 60;//GO TO STEP 60
	    END_IF;
	END_IF;
	
	//>>>>>STEP-60 ->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	//COPY NFP MESSAGE TO LOCAL IJC_DB AND ANSWER -1 TO IJC
	IF #SEQ_STEP = 60 THEN
	    //POINTER OFFSET TO STATUS WORD
	    IF PEEK_WORD(area := #DB, dbNumber := #DB_REC, byteOffset := #REC_OFFSET.SW) = #PLUS1 THEN
	        #ANS := (PEEK_WORD(area := #DB, dbNumber := #DB_REC, byteOffset := #REC_OFFSET.ANS));
	        #TMP := (PEEK_WORD(area := #DB, dbNumber := #DB_REC, byteOffset := #REC_OFFSET.ANS));
	     //COPY NFP RECEIVED
	        FOR #i := 0 TO 7 BY 1 DO
	            #CHAR_ARRAY[#i] := PEEK_BYTE(area := #DB, dbNumber := #DB_REC, byteOffset := #REC_OFFSET.MSG+#i);
	        END_FOR;
	        Chars_TO_Strg(Chars:=#CHAR_ARRAY,
	                      pChars:=0,
	                      Cnt:=8,
	                      Strg=>#NFP);
	        //SET TO -1 REC
	        POKE(area := #DB,
	             dbNumber := #DB_REC,
	             byteOffset := #REC_OFFSET.SW,
	             value := #MINUS1);
	        #DN := TRUE;
	        #SEQ_STEP := 100;
	    END_IF;
	END_IF;
	
	
	IF #TMP < 0 THEN
	    #FLT := TRUE;
	END_IF;
	//RESET FAULT
	
	
	//***** END**********************************************************************
	
END_FUNCTION_BLOCK

