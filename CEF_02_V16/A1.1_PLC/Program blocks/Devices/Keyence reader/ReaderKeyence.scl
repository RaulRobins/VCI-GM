FUNCTION_BLOCK "ReaderKeyence"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      "I_address_Read Data 128Byte" : HW_IO;
      "Q_address_Operation instruction Control Bits" : HW_IO;
      "Q_address_Parameter Bank Number" : HW_IO;
      iReset : Bool;
   END_VAR

   VAR_IN_OUT 
      device : "UDT_Reader";
   END_VAR

   VAR 
      ResultData : Array[1..128] of Char;
      ResultDataReadyCountOld : UInt;
      R_TRIG_Instance {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      IEC_Timer_0_Instance {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
   END_VAR

   VAR_TEMP 
      "Read Data 128ByteTemp" : Struct
         SlaveID : UInt;
         ResultDataReadyCount : UInt;
         ResultDataUpdateCount : UInt;
         ResultDataSize : UInt;
         ResultData : Array[1..128] of Char;
      END_STRUCT;
      "Operation instruction Control Bits" : Struct
         "Read Request" : Bool;
      END_STRUCT;
      retvalTmp : Int;
      i : USInt;
   END_VAR


BEGIN
	#retvalTmp := DPRD_DAT(LADDR := #"I_address_Read Data 128Byte", RECORD => #"Read Data 128ByteTemp");
	
	#R_TRIG_Instance(CLK := #device.start);
	
	#"Operation instruction Control Bits"."Read Request" := #device.start;
	
	IF #R_TRIG_Instance.Q THEN
	    FILL_BLK(IN := ' ',
	             COUNT := 128,
	             OUT => #ResultData[1]);
	    #device.data := '';
	    #device.length := 0;
	END_IF;
	
	#device.newData := FALSE;
	IF #device.start AND #ResultDataReadyCountOld <> #"Read Data 128ByteTemp".ResultDataReadyCount THEN
	    #ResultData := #"Read Data 128ByteTemp".ResultData;
	    #device.length := UINT_TO_USINT(#"Read Data 128ByteTemp".ResultDataSize - 1);
	    FOR #i := 1 TO #device.length DO
	        #device.data[#i] := #ResultData[#i];
	    END_FOR;
	    #device.start := FALSE;
	    #device.newData := TRUE;
	END_IF;
	
	#IEC_Timer_0_Instance(IN:=#device.start,
	                      PT:=t#5s);
	
	IF #IEC_Timer_0_Instance.Q THEN
	    #device.start := FALSE;
	    #device.error := TRUE;
	END_IF;
	
	IF #iReset THEN
	    #device.error := FALSE;
	END_IF;
	
	#ResultDataReadyCountOld := #"Read Data 128ByteTemp".ResultDataReadyCount;
	
	#retvalTmp := DPWR_DAT(LADDR := #"Q_address_Parameter Bank Number", RECORD := #device.bankNr);
	#retvalTmp := DPWR_DAT(LADDR := #"Q_address_Operation instruction Control Bits", RECORD := #"Operation instruction Control Bits");
	
	
	
	
END_FUNCTION_BLOCK

