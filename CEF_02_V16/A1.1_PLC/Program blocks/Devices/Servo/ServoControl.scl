FUNCTION_BLOCK "ServoControl"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      ServoParams { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "UDT_ServoPrameters";
      SafetyOK { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      "Activate positioning" : Bool;
      ResetAlarm { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      STOP : Bool;
   END_VAR

   VAR_OUTPUT 
      ConfigEPos_IO : DWord;
   END_VAR

   VAR_IN_OUT 
      ServoData : "UDT_Servo";
   END_VAR

   VAR 
      IEC_Timer_0_Instance {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      R_TRIG_Instance {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      ConfigEPos_bits : "UDT_ConfigEPos";
      ConfigEPos_word { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} AT ConfigEPos_bits : DWord;
      IEC_Timer_0_Instance_1 {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
   END_VAR


BEGIN
	//Copy parameter
	IF "ModeSelection_DB".mode.activeMode = "mode_2_base" OR "ModeSelection_DB".mode.activeMode = "mode_3_automat" OR "ModeSelection_DB".mode.activeMode = "mode_4_semiautomat" THEN
	    #ServoData.OverAcc := #ServoParams.OverAcc;
	    #ServoData.OverDec := #ServoParams.OverDec;
	    #ServoData.OverV := #ServoParams.OverV;
	    #ServoData.Velocity := #ServoParams.Velocity;
	END_IF;
	
	REGION configEPos
	    #ConfigEPos_bits.Off2 := TRUE;
	    #ConfigEPos_bits.Off3 := #STOP;
	    #ConfigEPos_bits.swLimitUsed := TRUE;
	    #ConfigEPos_bits.hwLimitUsed := TRUE;
	    #ConfigEPos_bits.reserve1 := FALSE;
	    #ConfigEPos_bits.reserve2 := FALSE;
	    #ConfigEPos_bits.reserve3 := FALSE;
	    #ConfigEPos_bits.reserve4 := FALSE;
	    #ConfigEPos_bits.reserve5 := FALSE;
	    #ConfigEPos_bits.reserve6 := FALSE;
	    #ConfigEPos_bits.reserve7 := FALSE;
	    #ConfigEPos_bits.reserve8 := FALSE;
	    #ConfigEPos_bits.reserve9 := FALSE;
	    #ConfigEPos_bits.reserve10 := FALSE;
	    #ConfigEPos_bits.reserve11 := FALSE;
	    #ConfigEPos_bits.reserve12 := FALSE;
	    #ConfigEPos_bits.reserve13 := FALSE;
	    #ConfigEPos_bits.reserve14 := FALSE;
	    #ConfigEPos_bits.reserve15 := FALSE;
	    #ConfigEPos_bits.reserve16 := FALSE;
	    #ConfigEPos_bits.reserve17 := FALSE;
	    #ConfigEPos_bits.reserve18 := FALSE;
	    #ConfigEPos_bits.reserve19 := FALSE;
	    #ConfigEPos_bits.reserve20 := FALSE;
	    #ConfigEPos_bits.reserve21 := FALSE;
	    #ConfigEPos_bits.reserve22 := FALSE;
	    #ConfigEPos_bits.reserve23 := FALSE;
	    #ConfigEPos_bits.reserve24 := FALSE;
	    #ConfigEPos_bits.reserve25 := FALSE;
	    #ConfigEPos_bits.reserve26 := FALSE;
	    #ConfigEPos_bits.reserve27 := FALSE;
	    #ConfigEPos_bits.reserve28 := FALSE;
	END_REGION
	
	//Enable movement
	#ServoData.CancelTraversing := #SafetyOK AND
	"DevicesData".Cylinders["MM104_AutoejectGripperLifting"].InBp AND
	"DevicesData".Cylinders["MM104_AutoejectGripperLifting"].ToBp;
	#ServoData.IntermediateStop := #SafetyOK;
	
	//Reset alarm
	#IEC_Timer_0_Instance_1(IN:=#ServoData.AckError,
	                        PT:=t#500ms);
	IF #IEC_Timer_0_Instance_1.Q THEN
	    #ServoData.AckError := FALSE;
	END_IF;
	IF #ResetAlarm AND (#ServoData.AxisError OR #ServoData.AxisWarn OR TRUE) THEN
	    #ServoData.AckError := true;
	END_IF;
	
	//Activate jog
	IF #ServoData.Jog1 OR #ServoData.Jog2 THEN
	    #ServoData.ModePos := 7;
	END_IF;
	
	//Activate positioning
	IF #"Activate positioning" THEN
	    #ServoData.ModePos := 2;
	END_IF;
	
	#ConfigEPos_IO := SWAP(#ConfigEPos_word);
	
	
END_FUNCTION_BLOCK

