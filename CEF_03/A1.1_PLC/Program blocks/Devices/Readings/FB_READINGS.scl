FUNCTION_BLOCK "FB_READINGS"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR 
      Reading : Array[1.."MaxDataReading"] of Struct
         Done : Bool;
         OK : Bool;
         NOK : Bool;
         Scan : String[70];
         NFP : String[30];
         IJC : Array[1.."NumberOfmessages"] of Struct
            SendMsg : Bool;
            Done : Bool;
            Answer : Int;
            State : USInt;
         END_STRUCT;
      END_STRUCT;
      ReadingsDone : Bool;
      Errors : Array[1..2] of Word;
      Error { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} AT Errors : Array[1..2, 1..16] of Bool;
   END_VAR

   VAR_TEMP 
      lctr1 : Int;
      lctr2 : Int;
      tempHolder : String;
      blankStr : String;
      NumberOfReadings : Int;
      eType : Int;   // Error type 1:reading, 2:IJCore
      count : Int;
   END_VAR

   VAR CONSTANT 
      NotUsed : USInt := 0;
      MasterNFP : USInt := 2;
      SecondaryNFP : USInt := 3;
      Component : USInt := 4;
   END_VAR


BEGIN
	//TITLE = 'READINGS'
	//AUTHOR: RAUL ROBINS
	//CREATED ON: 03/24/2023
	//VERSION: 1.1
	
	#NumberOfReadings := "DB_ProductionProgramActual".Program.NumberOfReadings;
	
	REGION Read code
	    
	    //Read request
	    IF "DevicesData".scanner.start THEN
	        FOR #lctr1 := 1 TO #NumberOfReadings DO
	            IF "DB_ProductionProgramActual".Program.Readings[#lctr1].Enable AND
	                NOT #Reading[#lctr1].Done THEN
	                "DB_INST_DTM_READERS".READER["DB_ProductionProgramActual".Program.Readings[#lctr1].ReaderNumber].Req := TRUE;
	            END_IF;
	            IF "DB_INST_DTM_READERS".READER["DB_ProductionProgramActual".Program.Readings[#lctr1].ReaderNumber].ResultsAvailable AND
	                "DB_INST_DTM_READERS".READER["DB_ProductionProgramActual".Program.Readings[#lctr1].ReaderNumber].ResultLenght <> 0 THEN
	                "DB_INST_DTM_READERS".READER["DB_ProductionProgramActual".Program.Readings[#lctr1].ReaderNumber].Req := FALSE;
	                #Reading[#lctr1].Done := TRUE;
	            END_IF;
	            
	            //Results
	            IF #Reading[#lctr1].Done THEN
	                //Compare strings
	                #tempHolder := MID(IN := "DB_INST_DTM_READERS".READER["DB_ProductionProgramActual".Program.Readings[#lctr1].ReaderNumber].DataStr,
	                                   L := LEN("DB_ProductionProgramActual".Program.Readings[#lctr1].ReferenceToFound),
	                                   P := "DB_ProductionProgramActual".Program.Readings[#lctr1].ReferenceStartPosition);
	                
	                IF #tempHolder = "DB_ProductionProgramActual".Program.Readings[#lctr1].ReferenceToFound THEN
	                    //Results OK
	                    #Reading[#lctr1].Scan := "DB_INST_DTM_READERS".READER["DB_ProductionProgramActual".Program.Readings[#lctr1].ReaderNumber].DataStr;
	                    #Reading[#lctr1].OK := TRUE;
	                    #Reading[#lctr1].NOK := FALSE;
	                    
	                    
	                    //Copy  NFP 
	                    //Master NFP
	                    IF "DB_ProductionProgramActual".Program.Readings[#lctr1].LabelType = 2 THEN
	                        #Reading[#lctr1].NFP := LEFT(IN := "DB_INST_DTM_READERS".READER["DB_ProductionProgramActual".Program.Readings[#lctr1].ReaderNumber].DataStr, L := 30);
	                        //Secondary NFP
	                    ELSIF "DB_ProductionProgramActual".Program.Readings[#lctr1].LabelType = 3 THEN
	                        //Linked to created NFP
	                        IF "DB_ProductionProgramActual".Program.Readings[1].MasterReadingNumber > 0 THEN
	                            ;
	                            //Linked to readed NFP
	                        ELSIF "DB_ProductionProgramActual".Program.Readings[1].LinkedMasterNumber > 0 THEN
	                            #Reading[#lctr1].NFP := #Reading["DB_ProductionProgramActual".Program.Readings[#lctr1].LinkedMasterNumber].NFP;
	                        END_IF;
	                        
	                    END_IF;
	                ELSE
	                    //Results NOK
	                    #Reading[#lctr1].OK := FALSE;
	                    #Reading[#lctr1].NOK := TRUE;
	                    #Reading[#lctr1].Scan := #blankStr;
	                END_IF;
	            END_IF;
	            //Count readings ok
	            IF #Reading[#lctr1].OK AND (#Reading[#lctr1].Scan <> #blankStr) OR NOT "DB_ProductionProgramActual".Program.Readings[#lctr1].Enable THEN
	                #count += 1;
	            END_IF;
	            IF #count = "DB_ProductionProgramActual".Program.NumberOfReadings THEN
	                #ReadingsDone := TRUE;
	            END_IF;
	            //Copy readings to buffer data
	            IF "sq_carousel_insertion_st1"."Set part present".X THEN
	                "AutoPositions".St1_Table1.Readings[#lctr1].Scan := #Reading[#lctr1].Scan;
	            END_IF;
	            
	            
	        END_FOR;
	    END_IF;
	    
	    
	    
	END_REGION
	
	REGION IJCore
	    FOR #lctr1 := 1 TO #NumberOfReadings DO
	        //TRACE
	        FOR #lctr2 := 1 TO 5 DO
	            CASE "DB_ProductionProgramActual".Program.Readings[#lctr1].Message[#lctr2].MessageType OF
	                "STA":
	                    "FC_READING_IJC_STA"(Req := #Reading[#lctr1].OK,
	                                         MessageNumber := "DB_ProductionProgramActual".Program.Readings[#lctr1].Message[#lctr2].MessageFlagNumber,
	                                         TraceabilityMode := "DB_MAIN_IJCORE".Mode,
	                                         NFP := #Reading[#lctr1].Scan,
	                                         ErrReset := "AlwaysTRUE",
	                                         MessageDone => #Reading[#lctr1].IJC[#lctr2].Done,
	                                         Answer := #Reading[#lctr1].IJC[#lctr2].Answer,
	                                         State := #Reading[#lctr1].IJC[#lctr2].State);
	                    
	                "PFC":
	                    "FC_TRACE_PFC"(Req := "DB_MAIN_IJCORE".CMD.PFC,
	                                   MessageNumber := "DB_ProductionProgramActual".Program.Readings[#lctr1].Message[#lctr2].MessageFlagNumber,
	                                   TraceabilityMode := "DB_MAIN_IJCORE".Mode,
	                                   NFP := "AutoPositions".St3_Fitting.Readings["DB_ProductionProgramActual".Program.Readings[#lctr1].MasterReadingNumber].Scan,
	                                   Kanban := "DB_ProductionProgramActual".Program.FaureciaNumber,
	                                   ErrReset := TRUE,
	                                   MessageDone => #Reading[#lctr1].IJC[#lctr2].Done,
	                                   Answer => #Reading[#lctr1].IJC[#lctr2].Answer,
	                                   State := #Reading[#lctr1].IJC[#lctr2].State);
	                    
	                "TRR":
	                    "FC_TRACE_TRR"(Req := "DB_MAIN_IJCORE".CMD.TRR,
	                                   MessageNumber := "DB_ProductionProgramActual".Program.Readings[#lctr1].Message[#lctr2].MessageFlagNumber,
	                                   TraceabilityMode := "DB_MAIN_IJCORE".Mode,
	                                   NFP := "AutoPositions".St3_Fitting.Readings["DB_ProductionProgramActual".Program.Readings[#lctr1].MasterReadingNumber].Scan,
	                                   ProcessStatus := 1,
	                                   NumberOfProcess := 1,
	                                   ErrReset := TRUE,
	                                   MessageDone => #Reading[#lctr1].IJC[#lctr2].Done,
	                                   Answer => #Reading[#lctr1].IJC[#lctr2].Answer,
	                                   State := #Reading[#lctr1].IJC[#lctr2].State);
	                    
	                "TRC":
	                    IF "DB_ProductionProgramActual".Program.Readings[#lctr1].MasterReadingNumber > 0 THEN
	                        "FC_READING_IJC_TRC"(Req := "DB_MAIN_IJCORE".CMD.TRC,
	                                             MessageNumber := "DB_ProductionProgramActual".Program.Readings[#lctr1].Message[#lctr2].MessageFlagNumber,
	                                             TraceabilityMode := "DB_MAIN_IJCORE".Mode,
	                                             NFP := #Reading["DB_ProductionProgramActual".Program.Readings[#lctr1].MasterReadingNumber].Scan,
	                                             Scan := #Reading[#lctr1].Scan,
	                                             ErrReset := TRUE,
	                                             MessageDone => #Reading[#lctr1].IJC[#lctr2].Done,
	                                             Answer := #Reading[#lctr1].IJC[#lctr2].Answer,
	                                             State := #Reading[#lctr1].IJC[#lctr2].State);
	                    END_IF;
	                ELSE:
	                    ;
	                    
	            END_CASE;
	            
	        END_FOR;
	    END_FOR;
	    
	END_REGION
	
	
	
	
	REGION Clear Data
	    IF NOT "DevicesData".scanner.start THEN
	        FOR #lctr1 := 1 TO "MaxDataReading" DO
	            "DB_INST_DTM_READERS".READER["DB_ProductionProgramActual".Program.Readings[#lctr1].ReaderNumber].Req := FALSE;
	            #Reading[#lctr1].Done := FALSE;
	            #Reading[#lctr1].OK := FALSE;
	            #Reading[#lctr1].NOK := FALSE;
	            #ReadingsDone := FALSE;
	            #Reading[#lctr1].Scan := #blankStr;
	        END_FOR;
	    END_IF;
	END_REGION
	
	// REGION Error Management
	//     #eType := 1;
	//     FOR #lctr1 := 1 TO #NumberOfReadings DO
	//         IF #Reading[#lctr1].NOK THEN
	//             #Error[#eType, 1] := TRUE;
	//         END_IF;
	
	//         //IJCore Errors
	//         FOR #lctr2 := 1 TO "NumberOfIJCoreMessages" DO
	//             #eType := 2;
	//             CASE #Reading[#lctr1].IJC[#lctr2].Answer OF
	//                 -2:  // NFP not founded
	//                     #Error[#eType, 1] := TRUE;
	//                 -3:  //Part number NOT inside BOM
	//                     #Error[#eType, 2] := TRUE;
	//                 -4: // PFC not ok
	//                     #Error[#eType, 3] := TRUE;
	//                 -5: //Component already used
	//                     #Error[#eType, 4] := TRUE;
	//                 -6: //Module already used
	//                     #Error[#eType, 5] := true;
	//                 -10: //Status NOK from previous operation
	//                     #Error[#eType, 6] := true;
	//             END_CASE;
	//         END_FOR;
	//     END_FOR;
	
	//     FOR #lctr1 := 1 TO 2 DO
	//         #Errors[#lctr1] := SWAP(#Errors[#lctr1]);
	//     END_FOR;
	// END_REGION
	
	
	
	
	
	
END_FUNCTION_BLOCK

