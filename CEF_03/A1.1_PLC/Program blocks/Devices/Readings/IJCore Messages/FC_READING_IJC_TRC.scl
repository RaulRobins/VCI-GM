FUNCTION "FC_READING_IJC_TRC" : Void
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      Req : Bool;   // Request message
      MessageNumber : DInt;   // Message number
      TraceabilityMode : Int;   // Tracability mode
      NFP : String;   // NFP
      Scan : String;   // Scan data
      ErrReset : Bool;   // Error reset
   END_VAR

   VAR_OUTPUT 
      MessageDone : Bool;   // Mesagge Complete
   END_VAR

   VAR_IN_OUT 
      Answer : Int;   // Answer from ijcore
      State : USInt;   // s
   END_VAR

   VAR_TEMP 
      SEND_OFFSET : Struct
         SW : DInt;
         MSG : DInt;
      END_STRUCT;
      REC_OFFSET : Struct
         SW : DInt;
         MSG : DInt;
         ANS : DInt;
      END_STRUCT;
      IDB : Int;
      i : Int;
      j : Int;
      k : Int;
      MSG : DInt;
      ErrCode : Int;
      CNT : Int;
      CNT_STR : String[2];
   END_VAR

   VAR CONSTANT 
      "DB" : Byte := 16#84;
      CLEAR : Word := 16#0000;
      MINUS1 : Word := 16#FFFF;
      PLUS1 : Word := 16#0001;
      DB_REC : DB_ANY := 1006;
      DB_SEND : DB_ANY := 1005;
      Blank : String := '';
   END_VAR


BEGIN
	//TITLE = 'IJCORE PROTOCOL TRC or TRB'
	//AUTHOR: RAUL ROBINS
	//CREATED ON: 03/24/2023
	//VERSION: 3.0
	
	
	
	IF #MessageNumber < 1  THEN
	    RETURN;
	END_IF;
	
	
	
	
	IF NOT #Req THEN // Error Reset
	    #State := 0;
	END_IF;
	
	#SEND_OFFSET.SW := (#MessageNumber * 2) + 2; //Calc message send sw offset
	#SEND_OFFSET.MSG := ((#MessageNumber - 1) * 80) + 604; // Calc send message offset
	#REC_OFFSET.SW := (#MessageNumber - 1) * 2; // Calc receive sw offset
	#REC_OFFSET.ANS := ((#MessageNumber - 1) * 32) + 600; // Calc receive answer offset
	#REC_OFFSET.MSG := ((#MessageNumber - 1) * 32) + 602; // Calc receive message offset
	
	
	CASE #State OF
	    0: // Initial State
	        #MessageDone := FALSE;
	        #Answer := 0;
	
	        POKE(area := #DB, //Clear send flag
	             dbNumber := #DB_SEND,
	             byteOffset := #SEND_OFFSET.SW,
	             value := #MINUS1);
	        POKE(area := #DB, //Clear receive flag
	             dbNumber := #DB_REC,
	             byteOffset := #REC_OFFSET.SW,
	             value := #MINUS1);
	     
	        #State := 10; ///Transition to state 10
	        
	    10: // Wait for start command
	        IF #Req THEN //If start command active
	            
	            POKE(area := #DB, //Clear send flag
	                 dbNumber := #DB_SEND,
	                 byteOffset := #SEND_OFFSET.SW,
	                 value := #MINUS1);
	            POKE(area := #DB, //Clear receive flag
	                 dbNumber := #DB_REC,
	                 byteOffset := #REC_OFFSET.SW,
	                 value := #MINUS1);
	            POKE(area := #DB, // Clear answer 
	                 dbNumber := #DB_REC,
	                 byteOffset := #REC_OFFSET.ANS,
	                 value := #CLEAR);
	            
	            FOR #i := 0 TO 79 BY 1 DO //Clear all send array
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + #i),
	                     value := '$00');
	            END_FOR;
	            FOR #i := 0 TO 29 BY 1 DO //Clear all receive array
	                POKE(area := #DB,
	                     dbNumber := #DB_REC,
	                     byteOffset := (#REC_OFFSET.MSG + #i),
	                     value := '$00');
	            END_FOR;
	            #State := 20; //Transition to state 20
	        END_IF;
	        
	    20: // Create message to send
	        FOR #i := 0 TO 7 BY 1 DO //Copy NFP to DB to send
	                    POKE(area := #DB,
	                         dbNumber := #DB_SEND,
	                         byteOffset := (#SEND_OFFSET.MSG + #i),
	                         value := #NFP[#i + 1]);
	                END_FOR;
	                #CNT := (LEN(#Scan));
	                VAL_STRG(IN := #CNT,
	                         SIZE := 2,
	                         PREC := 0,
	                         FORMAT := W#16#0,
	                         P := 1,
	                         OUT => #CNT_STR);
	                IF #CNT < 10 THEN
	                    #CNT_STR := REPLACE(IN1 := #CNT_STR, IN2 := '0',
	                                        L := 1,
	                                        P := FIND(IN1 := #CNT_STR,
	                                                  IN2 := ' '));
	                END_IF;
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + 8),
	                     value := #CNT_STR[1]);
	                POKE(area := #DB,
	                     dbNumber := #DB_SEND,
	                     byteOffset := (#SEND_OFFSET.MSG + 9),
	                     value := #CNT_STR[2]);
	                FOR #i := 0 TO 70 BY 1 DO
	                    POKE(area := #DB,
	                         dbNumber := #DB_SEND,
	                         byteOffset := (#SEND_OFFSET.MSG + #i + 10),
	                         value := #Scan[#i + 1]);
	                END_FOR;
	                
	                
	                
	
	
	        #State := 30; // Transition to state 30
	        
	    30: //Set flag to "1" to inform that PLC is ready to send (DB5 Ó 1005)
	        POKE(area := #DB,//Set flag to "1" to inform that PLC is ready to send
	             dbNumber := #DB_SEND,
	             byteOffset := #SEND_OFFSET.SW,
	             value := #PLUS1);
	        #State := 40; // Transition to state 40
	        
	        
	    40: //Wait to IJCORE response with "-1"
	        IF (PEEK_WORD(area := #DB, dbNumber := #DB_SEND, byteOffset := #SEND_OFFSET.SW) = #MINUS1)
	        THEN
	            #State := 50; // Transition to state 50
	        END_IF;
	        
	    50: //Check if IJCORE have answer from DB Receive
	        IF (PEEK_WORD(area := #DB, dbNumber := #DB_REC, byteOffset := #REC_OFFSET.SW) = #PLUS1)
	        THEN
	            #Answer := WORD_TO_INT(PEEK_WORD(area := #DB, dbNumber := #DB_REC, byteOffset := #REC_OFFSET.ANS)); //Copy answer from IJCORE
	            //Ensure aswer is copied
	            IF #Answer <> 0 THEN
	                #State := 60; // Transition to state 100
	            END_IF;
	        END_IF;
	        
	    60: //Change Flag to "-1"
	        POKE(area := #DB, //Set "-1" to IJCORE
	             dbNumber := #DB_REC,
	             byteOffset := #REC_OFFSET.SW,
	             value := #MINUS1);
	        #State := 100; // Transition to state 100
	        
	        
	    100: //Sequence done
	        CASE #TraceabilityMode OF
	            1:// Full traceability
	                IF #Answer = 1 THEN
	                    #MessageDone := TRUE;
	                ELSE
	                    #MessageDone := FALSE;
	                END_IF;
	            2:// Traceability only
	                #MessageDone := TRUE;
	        END_CASE;
	        
	        IF NOT #Req THEN
	            #State := 0; // Transition to state 0
	        END_IF;
	END_CASE;
	
	
	
	
	
	
	
END_FUNCTION

