FUNCTION_BLOCK "HydraulicMain"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR 
      HydraulicCylinder_LeftCupforming : "HydraulicCylinder";
      HydraulicCylinder_RightCupforming : "HydraulicCylinder";
      VH1StatusOld : "UDT_Cylinder";
      VH2StatusOld : "UDT_Cylinder";
      VH3StatusOld : "UDT_Cylinder";
      VH4StatusOld : "UDT_Cylinder";
      FittingCycle_InstanceCupformingLeft : "FittingCycle";
      FittingCycle_InstanceCupformingRight : "FittingCycle";
      R_TRIG_Instance {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      R_TRIG_Instance_1 {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      R_TRIG_Instance_2 {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      R_TRIG_Instance_3 {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      HydraulicMotor_Instance : "HydraulicMotor";
      dummyCylinderLeft { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : "UDT_Cylinder";
      dummyCylinderRight : "UDT_Cylinder";
   END_VAR

   VAR_TEMP 
      i : Int;
   END_VAR


BEGIN
	REGION cylinders data
	    "DevicesData".cupformingLeft_cylinder.Position := "AnalogData".InputResults[3];
	    "DevicesData".cupformingRight_cylinder.Position := "AnalogData".InputResults[4];
	    "DevicesData".cupformingLeft_cylinder.Force := "DevicesData".Digiforce1.ActualForce;
	    "DevicesData".cupformingRight_cylinder.Force := "DevicesData".Digiforce2.ActualForce;
	    "DevicesData".cupformingLeft_cylinder.HAxis := "DevicesData".Digiforce1.ActualWay;
	    "DevicesData".cupformingRight_cylinder.HAxis := "DevicesData".Digiforce2.ActualWay;
	END_REGION
	
	REGION common pressure
	    "DevicesData".cupformingRight_cylinder.PressureCmd := "DevicesData".cupformingLeft_cylinder.PressureCmd;
	    "DevicesData".CupformingPressure := "DevicesData".cupformingLeft_cylinder.PressureCmd;
	END_REGION
	REGION stop cylinders IF reduction valve is off
	    IF NOT "qHydraulicReductionValveCupforming" THEN
	        "DevicesData".cupformingLeft_cylinder.Status.ToFp := TRUE;
	        "DevicesData".cupformingRight_cylinder.Status.ToFp := TRUE;
	    END_IF;
	END_REGION
	REGION dummy cylinders
	    #dummyCylinderLeft.InBp := #dummyCylinderLeft.ToBp;
	    #dummyCylinderLeft.InWp := #dummyCylinderLeft.ToWp;
	    #dummyCylinderRight.InBp := #dummyCylinderRight.ToBp;
	    #dummyCylinderRight.InWp := #dummyCylinderRight.ToWp;
	END_REGION
	
	REGION cupforming left - VH1
	    #HydraulicCylinder_LeftCupforming(HydraulicActive := "safety_signals"."3L+" AND "qHydraulicKM20"(* AND "qHydraulicMotorStart" AND "qHydraulicReduction valve"*),
	                                      BasicPositionMin := "StationParameters".VH1BasicPositionMin,
	                                      BasicPositionMax := "StationParameters".VH1BasicPositionMax,
	                                      MaxPosition := "StationParameters".VH1MaxPosition,
	                                      ManualCommand := "HMIData".ManualCommand,
	                                      CylinderNumber := 3,
	                                      data := "DevicesData".cupformingLeft_cylinder);
	    #FittingCycle_InstanceCupformingLeft(parameters := "DB_ProductionProgramActual".Program.CupformingParametersLeft,
	                                         basicPosition := "DevicesData".cupformingLeft_cylinder.Status.InBp AND
	                                         "DevicesData".Cylinders["MM302_ShiftingSupportLeft"].InBp AND
	                                         "DevicesData".Cylinders["MM352_ShiftWedgeLeft"].InBp AND
	                                         "DevicesData".Cylinders["MM3100_SidememberSupport"].InBp,
	                                         MaxPosition := "StationParameters".VH1MaxPosition,
	                                         endStopCylinderActive := true,
	                                         shiftSupportToWork := "DB_ProductionProgramActual".Program.MechanicalType = 0,
	                                         rivetSensor := TRUE,
	                                         rivetStatusOtherCylinder := 1,
	                                         HydraulicCylinder := "DevicesData".cupformingLeft_cylinder,
	                                         dataFitting := "DevicesData".cupformingLeft_cycle,
	                                         dataDigiforce := "DevicesData".Digiforce1,
	                                         stopperForWedgeCylinder := "DevicesData".Cylinders["MM306_MovingStopLeft"],
	                                         supportCylinder := "DevicesData".Cylinders["MM302_ShiftingSupportLeft"],
	                                         wedgeCylinder := "DevicesData".Cylinders["MM352_ShiftWedgeLeft"],
	                                         MeasuredData := "AutoInfo".PartMeasuredData.LeftCupforming);
	END_REGION
	REGION cupforming right - VH2
	    #HydraulicCylinder_RightCupforming(HydraulicActive := "safety_signals"."3L+" AND "qHydraulicKM20"(* AND "qHydraulicMotorStart" AND "qHydraulicReduction valve"*),
	                                       BasicPositionMin := "StationParameters".VH2BasicPositionMin,
	                                       BasicPositionMax := "StationParameters".VH2BasicPositionMax,
	                                       MaxPosition := "StationParameters".VH2MaxPosition,
	                                       ManualCommand := "HMIData".ManualCommand,
	                                       CylinderNumber := 4,
	                                       data := "DevicesData".cupformingRight_cylinder);
	    #FittingCycle_InstanceCupformingRight(parameters := "DB_ProductionProgramActual".Program.CupformingParametersRight,
	                                          basicPosition := "DevicesData".cupformingRight_cylinder.Status.InBp AND
	                                          "DevicesData".Cylinders["MM300_ShiftingSupportRight"].InBp AND
	                                          "DevicesData".Cylinders["MM350_ShiftWedgeRight"].InBp AND
	                                          "DevicesData".Cylinders["MM3100_SidememberSupport"].InBp,
	                                          MaxPosition := "StationParameters".VH2MaxPosition,
	                                          endStopCylinderActive := true,
	                                          shiftSupportToWork := "DB_ProductionProgramActual".Program.MechanicalType = 1,
	                                          rivetSensor := TRUE,
	                                          rivetStatusOtherCylinder := 1,
	                                          HydraulicCylinder := "DevicesData".cupformingRight_cylinder,
	                                          dataFitting := "DevicesData".cupformingRight_cycle,
	                                          dataDigiforce := "DevicesData".Digiforce2,
	                                          stopperForWedgeCylinder := "DevicesData".Cylinders["MM304_MovingStopRight"],
	                                          supportCylinder := "DevicesData".Cylinders["MM300_ShiftingSupportRight"],
	                                          wedgeCylinder := "DevicesData".Cylinders["MM350_ShiftWedgeRight"],
	                                          MeasuredData := "AutoInfo".PartMeasuredData.RightCupforming);
	END_REGION
	
	REGION cycles handshake
	    IF "SystemHMI".AutomaticMode THEN
	        IF "DevicesData".cupformingLeft_cycle.InPreposition AND "DevicesData".cupformingRight_cycle.InPreposition THEN
	            "DevicesData".cupformingLeft_cycle.ContinueFitting := TRUE;
	            "DevicesData".cupformingRight_cycle.ContinueFitting := TRUE;
	        END_IF;
	        IF "DevicesData".cupformingLeft_cycle.Returning AND "DevicesData".cupformingRight_cycle.Returning THEN
	            "DevicesData".cupformingLeft_cycle.ContinueReturn := TRUE;
	            "DevicesData".cupformingRight_cycle.ContinueReturn := TRUE;
	        END_IF;
	        "DevicesData".cupformingLeft_cycle.continueWithSupportToWork := TRUE;
	        "DevicesData".cupformingRight_cycle.continueWithSupportToWork := TRUE;
	    END_IF;
	    
	    IF "SystemHMI".ManualMode THEN
	        "DevicesData".cupformingLeft_cycle.ContinueFitting := true;
	        "DevicesData".cupformingLeft_cycle.ContinueReturn := true;
	        "DevicesData".cupformingLeft_cycle.continueWithSupportToWork := true;
	        "DevicesData".cupformingRight_cycle.ContinueFitting := true;
	        "DevicesData".cupformingRight_cycle.ContinueReturn := true;
	        "DevicesData".cupformingRight_cycle.continueWithSupportToWork := true;
	    END_IF;
	END_REGION
	
	REGION manual mode
	//Start fitting in manual mode
	    IF "SystemHMI".ManualMode THEN
	        IF "HMIData".ManualCommand = 5101 THEN
	            "DevicesData".rivetingLeft_cycle.Start := true;
	        END_IF;
	        IF "HMIData".ManualCommand = 6101 THEN
	            "DevicesData".rivetingLeft_cycle.Start := false;
	        END_IF;
	        IF "HMIData".ManualCommand = 5102 THEN
	            "DevicesData".rivetingRight_cycle.Start := true;
	        END_IF;
	        IF "HMIData".ManualCommand = 6102 THEN
	            "DevicesData".rivetingRight_cycle.Start := false;
	        END_IF;
	        
	        IF "HMIData".ManualCommand = 5103 THEN
	            "DevicesData".cupformingLeft_cycle.Start := true;
	        END_IF;
	        IF "HMIData".ManualCommand = 6103 THEN
	            "DevicesData".cupformingLeft_cycle.Start := false;
	        END_IF;
	        IF "HMIData".ManualCommand = 5104 THEN
	            "DevicesData".cupformingRight_cycle.Start := true;
	        END_IF;
	        IF "HMIData".ManualCommand = 6104 THEN
	            "DevicesData".cupformingRight_cycle.Start := false;
	        END_IF;
	    END_IF;
	    
	    //Finished cycle detection in manual mode
	    #R_TRIG_Instance(CLK := "DevicesData".rivetingLeft_cycle.Done);
	    #R_TRIG_Instance_1(CLK := "DevicesData".rivetingRight_cycle.Done);
	    #R_TRIG_Instance_2(CLK := "DevicesData".cupformingLeft_cycle.Done);
	    #R_TRIG_Instance_3(CLK := "DevicesData".cupformingRight_cycle.Done);
	    
	    //Copy part errors after finishing cycle
	    
	    IF #R_TRIG_Instance.Q THEN
	        FOR #i := 1 TO 8 DO
	            "Alarms".PartErrorsHMI[#i + 9] := "DevicesData".rivetingLeft_cycle.PartErrors[#i];
	        END_FOR;
	    END_IF;
	    IF #R_TRIG_Instance_1.Q THEN
	        FOR #i := 1 TO 8 DO
	            "Alarms".PartErrorsHMI[#i + 19] := "DevicesData".rivetingRight_cycle.PartErrors[#i];
	        END_FOR;
	    END_IF;
	    IF #R_TRIG_Instance_2.Q THEN
	        FOR #i := 1 TO 8 DO
	            "Alarms".PartErrorsHMI[#i + 29] := "DevicesData".cupformingLeft_cycle.PartErrors[#i];
	        END_FOR;
	    END_IF;
	    IF #R_TRIG_Instance_3.Q THEN
	        FOR #i := 1 TO 8 DO
	            "Alarms".PartErrorsHMI[#i + 39] := "DevicesData".cupformingRight_cycle.PartErrors[#i];
	        END_FOR;
	    END_IF;
	    
	    //reset cycles when mode change
	    IF "SystemHMI".ModeChanged AND
	        NOT ("ModeSelection_DB".PrevMode = "mode_3_automat" AND "ModeSelection_DB".mode.activeMode = "mode_3_automat") AND
	        NOT ("ModeSelection_DB".PrevMode = "mode_4_semiautomat" AND "ModeSelection_DB".mode.activeMode = "mode_4_semiautomat")
	    THEN
	        "DevicesData".cupformingLeft_cycle.Start := false;
	        "DevicesData".cupformingRight_cycle.Start := false;
	        "DevicesData".rivetingLeft_cycle.Start := false;
	        "DevicesData".rivetingRight_cycle.Start := false;
	    END_IF;
	END_REGION
	
	REGION hydraulic pump
	    #HydraulicMotor_Instance(cycleActiveCupforming :=
	                             #FittingCycle_InstanceCupformingLeft.cnt >= 40 AND #FittingCycle_InstanceCupformingLeft.cnt <= 105 OR
	                             #FittingCycle_InstanceCupformingRight.cnt >= 40 AND #FittingCycle_InstanceCupformingRight.cnt <= 105 OR
	                             ("sq_fitting_station_st3"."Hydraulic cylinders back".X OR "sq_fitting_station_st3"."Hydraulic cylinders back.".X) AND
	                             (NOT "DevicesData".cupformingLeft_cylinder.Status.InBp OR NOT "DevicesData".cupformingRight_cylinder.Status.InBp),
	                             cycleActiveRiveting := FALSE,
	                             temp1nok := "iOilTemperature50",
	                             temp2nok := "iOilTemperature65" OR NOT "iOilLowLevelOK" OR NOT "iOilHighLevekOK",
	                             data := "DevicesData".Hydraulic,
	                             qKM20 := "DevicesData".Hydraulic.StartMotor,
	//                             qMotor := "qHydraulicMotorStart",
	                             qValveCupforming := "qHydraulicReductionValveCupforming");
	    IF "ModeSelection_DB".mode.modeChanged THEN
	        IF "ModeSelection_DB".mode.activeMode = "mode_0_not_selected" OR
	            "ModeSelection_DB".mode.activeMode = "mode_1_manual" THEN
	            "DevicesData".Hydraulic.AutoMode := FALSE;
	        END_IF;
	    END_IF;
	    IF "sq_fitting_station_st3"."Hydraulic cylinders back".X OR
	        "sq_fitting_station_st3"."Hydraulic cylinders back.".X THEN
	        "DevicesData".cupformingLeft_cylinder.PressureCmd := "DB_ProductionProgramActual".Program.CupformingParametersLeft.ApproachForce;
	        "DevicesData".cupformingRight_cylinder.PressureCmd := "DB_ProductionProgramActual".Program.CupformingParametersRight.ApproachForce;
	        "DevicesData".cupformingLeft_cylinder.FlowCmd := "DB_ProductionProgramActual".Program.CupformingParametersLeft.ApproachSpeed;
	        "DevicesData".cupformingRight_cylinder.FlowCmd := "DB_ProductionProgramActual".Program.CupformingParametersRight.ApproachSpeed;
	    END_IF;
	END_REGION
	
	REGION Riveting cylinders reduction valve Manual control
	    IF "DB_MainData".HMI.ActualScreenNumber <> 11 OR NOT "SystemHMI".ManualMode THEN
	        "HydraulicManualMode".CupformingCylinderActiveHMI := false;
	    END_IF;
	    
	    IF "SystemHMI".ManualMode THEN
	        IF NOT "DevicesData".cupformingLeft_cycle.Running AND NOT "DevicesData".cupformingRight_cycle.Running THEN
	            "qHydraulicReductionValveCupforming" := "HydraulicManualMode".CupformingCylinderActiveHMI AND NOT "iOilTemperature50";
	        ELSE
	            "HydraulicManualMode".CupformingCylinderActiveHMI := false;
	        END_IF;
	    END_IF;
	    
	END_REGION
	
	REGION history
	    "FittingHistoryLeftCupforming_DB"(iNewCycle := "DevicesData".cupformingLeft_cycle.Done,
	                                      iData := "AutoInfo".PartMeasuredData.LeftCupforming);
	    "FittingHistoryRightCupforming_DB"(iNewCycle := "DevicesData".cupformingRight_cycle.Done,
	                                       iData := "AutoInfo".PartMeasuredData.RightCupforming);
	END_REGION
	
	
END_FUNCTION_BLOCK

