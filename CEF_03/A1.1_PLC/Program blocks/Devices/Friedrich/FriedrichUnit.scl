FUNCTION_BLOCK "FriedrichUnit"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      safetyOK : Bool;
      iReady : Bool;
      iZ1OK : Bool;
      iH1OK : Bool;
      iH2OK : Bool;
      iTimeOK : Bool;
      iNoAlarm : Bool;
      FriedrichNumber : Int;
      Port : UInt;
      IP1 : USInt;
      IP2 : USInt;
      IP3 : USInt;
      IP4 : USInt;
      ID : CONN_OUC;
   END_VAR

   VAR_OUTPUT 
      qStart : Bool;
      qPrgbit4 : Bool;
      qPrgbit3 : Bool;
      qPrgbit2 : Bool;
      qPrgbit1 : Bool;
      qPrgbit0 : Bool;
      CommunicationError : Bool;
   END_VAR

   VAR_IN_OUT 
      RivetData : "UDT_Friedrich";
   END_VAR

   VAR 
      startCounter { S7_SetPoint := 'True'} : Int;
      cnt { S7_SetPoint := 'True'} : Int;
      lenghtSaved : UInt;
      R_TRIG_Start {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      IEC_Timer_Start {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      IEC_Timer_NotStarted {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      IEC_Timer_0_Error {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
      ethComm : Struct
         ReconnectTimer {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
         ReconnectTimer1 {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
         DisableInternal { S7_SetPoint := 'True'} : Bool;
         recEnable { S7_SetPoint := 'True'} : Bool;
         recNDR : Bool;
         recBusy : Bool;
         recError : Bool;
         recStatus : Word;
         recLEN : UDInt;
         recData : Array[1..200] of Char;
         RecievedData { S7_SetPoint := 'True'} : Array[1..200] of Char;
         Connection {InstructionName := 'TCON_Param'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TCON_Param;
         TS_REQ { S7_SetPoint := 'True'} : Bool;
         TS_CONT : Bool;
         TS_LEN : UDInt;
         TS_Done : Bool;
         TS_BUSY : Bool;
         TS_Error : Bool;
         TS_Status : Word;
         TS_StatusOld : Word;
         TS_Com_RST : Bool;
         DataToSend : Array[1..100] of Char;
         tConnError {InstructionName := 'TON_TIME'; LibVersion := '1.0'; S7_SetPoint := 'False'} : TON_TIME;
         s { S7_SetPoint := 'True'} : String;
         re : Real;
         d1 : DInt;
         d2 : DInt;
         lenghtSaved : UInt;
      END_STRUCT;
      TSEND_C_Instance {InstructionName := 'TSEND_C'; LibVersion := '3.2'; S7_SetPoint := 'False'} : TSEND_C;
      TRCV_Instance {InstructionName := 'TRCV'; LibVersion := '4.0'; S7_SetPoint := 'False'} : TRCV;
      IEC_Timer_start_timeout {InstructionName := 'TON_TIME'; LibVersion := '1.0'} : TON_TIME;
   END_VAR

   VAR_TEMP 
      i : Int;
      comm : Int;
      prgTemp : Int;
      s : String;
      re : Real;
   END_VAR


BEGIN
	
	(*//Start command from HMI
	IF NOT #DisableHMIControl THEN
	    #RivetData.Start := FALSE;
	    IF #HMICommand - 500 = #FriedrichNumber THEN
	        #RivetData.Start := true;
	    END_IF;
	END_IF;
	*)
	
	//Calculate program number
	IF #RivetData.PrgNumber < 1 THEN
	    #RivetData.PrgNumber := 1;
	END_IF;
	IF #RivetData.PrgNumber > 31 THEN
	    #RivetData.PrgNumber := 31;
	END_IF;
	#prgTemp := #RivetData.PrgNumber;
	#qPrgbit0 := INT_TO_BOOL(IN := #prgTemp);
	#prgTemp := SHR(IN := #prgTemp, N := 1);
	#qPrgbit1 := INT_TO_BOOL(IN := #prgTemp);
	#prgTemp := SHR(IN := #prgTemp, N := 1);
	#qPrgbit2 := INT_TO_BOOL(IN := #prgTemp);
	#prgTemp := SHR(IN := #prgTemp, N := 1);
	#qPrgbit3 := INT_TO_BOOL(IN := #prgTemp);
	#prgTemp := SHR(IN := #prgTemp, N := 1);
	#qPrgbit4 := INT_TO_BOOL(IN := #prgTemp);
	
	//Start OF riveting process
	#R_TRIG_Start(CLK := #RivetData.Start);
	IF #R_TRIG_Start.Q THEN
	    #RivetData.Start := FALSE;
	    IF #iReady THEN
	        #qStart := TRUE;
	        #RivetData.NOK := FALSE;
	        #RivetData.OK := FALSE;
	        #RivetData.Running := TRUE;
	        #RivetData.StartError := FALSE;
	        #cnt := 100;
	    END_IF;
	END_IF;
	#IEC_Timer_start_timeout(IN:=#RivetData.Start,
	                         PT:=t#1s);
	IF #IEC_Timer_start_timeout.Q THEN
	    #RivetData.Start := FALSE;
	END_IF;
	//Wait 
	#IEC_Timer_Start(IN := #cnt = 100,
	                 PT := t#500ms);
	IF #cnt = 100 THEN
	    IF #IEC_Timer_Start.Q THEN
	        #qStart := FALSE;
	        #cnt := 200;
	    END_IF;
	END_IF;
	
	//Check that riveting cycle started
	#IEC_Timer_NotStarted(IN:=#cnt=200 AND #iReady,
	                      PT:=t#1s);
	IF #cnt = 200 THEN
	    IF NOT #iReady
	    THEN
	        #cnt := 150;
	    END_IF;
	    IF #IEC_Timer_NotStarted.Q THEN
	        #qStart := TRUE;
	        #cnt := 100;
	        #startCounter := #startCounter + 1;
	        IF #startCounter > 3 THEN
	            #RivetData.StartError := TRUE;
	            #cnt := 0;
	            #RivetData.Running := FALSE;
	            #qStart := FALSE;
	        END_IF;
	    END_IF;
	END_IF;
	
	//Waiting for finished rivetin 
	IF #cnt = 150 AND #iReady THEN
	    #cnt := 160;
	END_IF;
	
	//Evaluation result
	IF #cnt = 160 THEN
	    #RivetData.Running := FALSE;
	    #RivetData.Ready := TRUE;
	    #RivetData.StartError := FALSE;
	    IF #iNoAlarm AND #iH1OK AND #iH2OK AND #iTimeOK AND #iZ1OK THEN
	        #RivetData.OK := TRUE;
	        #RivetData.NOK := FALSE;
	    ELSE
	        #RivetData.NOK := TRUE;
	        #RivetData.OK := FALSE;
	    END_IF;
	    #RivetData.H1OK := #iH1OK;
	    #RivetData.H2OK := #iH2OK;
	    #RivetData.TimeOK := #iTimeOK;
	    #RivetData.Z1OK := #iZ1OK;
	    #cnt := 0;
	END_IF;
	
	#RivetData.Ready := (#cnt = 0) AND NOT #RivetData.Start AND #iReady AND #iNoAlarm;
	
	//Alarm unit not ready   
	#IEC_Timer_0_Error(IN := (NOT #iReady OR NOT #iNoAlarm) AND #safetyOK,
	                   PT := t#15s);
	#RivetData.Error := #IEC_Timer_0_Error.Q;
	
	REGION Ethernet communication
	    REGION Connection parameters
	        #ethComm.Connection.ID := #ID;
	        #ethComm.Connection.REM_STADDR[1] := #IP1;
	        #ethComm.Connection.REM_STADDR[2] := #IP2;
	        #ethComm.Connection.REM_STADDR[3] := #IP3;
	        #ethComm.Connection.REM_STADDR[4] := #IP4;
	        
	        #ethComm.Connection.CONNECTION_TYPE := 17;
	        
	        #ethComm.d1 := UINT_TO_DINT(#Port);
	        #ethComm.d2 := #ethComm.d1 MOD 256;
	        #ethComm.d1 := #ethComm.d1 - #ethComm.d2;
	        #ethComm.d1 := #ethComm.d1 / 256;
	        
	        #ethComm.Connection.REM_TSAP_ID[1] := DINT_TO_BYTE(#ethComm.d1);
	        #ethComm.Connection.REM_TSAP_ID[2] := DINT_TO_BYTE(#ethComm.d2);
	        #ethComm.Connection.REM_STADDR_LEN := 4;
	        #ethComm.Connection.ACTIVE_EST := true;
	        #ethComm.Connection.LOCAL_DEVICE_ID := 1;
	        #ethComm.Connection.REM_TSAP_ID_LEN := 2;
	        
	        #ethComm.TS_REQ := true;
	        #ethComm.TS_CONT := NOT #ethComm.DisableInternal;
	        #ethComm.TS_LEN := 0;
	    END_REGION
	    
	    #TSEND_C_Instance(REQ := #ethComm.TS_REQ,
	                      CONT := #ethComm.TS_CONT,
	                      LEN := #ethComm.TS_LEN,
	                      DONE => #ethComm.TS_Done,
	                      BUSY => #ethComm.TS_BUSY,
	                      ERROR => #ethComm.TS_Error,
	                      STATUS => #ethComm.TS_StatusOld,
	                      CONNECT := #ethComm.Connection,
	                      DATA := #ethComm.DataToSend,
	                      COM_RST := #ethComm.TS_Com_RST);
	    
	    REGION Connection error / reconect
	        #ethComm.tConnError(IN := #ethComm.TS_StatusOld <> 16#7004,
	                            PT := t#5s,
	                            Q => #CommunicationError);
	        
	        #ethComm.ReconnectTimer(IN := #CommunicationError AND NOT #ethComm.DisableInternal,
	                                PT := t#2s);
	        IF #ethComm.ReconnectTimer.Q THEN
	            #ethComm.DisableInternal := TRUE;
	        END_IF;
	        
	        #ethComm.ReconnectTimer1(IN := #ethComm.DisableInternal,
	                                 PT := t#1s);
	        IF #ethComm.ReconnectTimer1.Q THEN
	            #ethComm.DisableInternal := FALSE;
	        END_IF;
	    END_REGION
	
	    #ethComm.recEnable := TRUE;
	    #TRCV_Instance(EN_R := #ethComm.recEnable,
	                   ID := #ID,
	                   LEN := 0,
	                   ADHOC := TRUE,
	                   NDR => #ethComm.recNDR,
	                   BUSY => #ethComm.recBusy,
	                   ERROR => #ethComm.recError,
	                   STATUS => #ethComm.recStatus,
	                   RCVD_LEN => #ethComm.recLEN,
	                   DATA := #ethComm.recData);
	    
	    REGION New data received
	        #RivetData.NewData := FALSE;
	        IF #R_TRIG_Start.Q THEN
	            #RivetData.NewDataAfterStart := FALSE;
	        END_IF;
	        IF #ethComm.recNDR THEN
	            #lenghtSaved := UDINT_TO_UINT(#ethComm.recLEN);
	            IF #lenghtSaved > 90 THEN
	                #RivetData.NewData := TRUE;
	                #RivetData.NewDataAfterStart := TRUE;
	                //Parse recieved data
	                FOR #i := 1 TO 90 DO
	                    IF #ethComm.recData[#i] = ',' THEN
	                        #ethComm.recData[#i] := '.';
	                    END_IF;
	                END_FOR;
	                
	                Chars_TO_Strg(Chars := #ethComm.recData,
	                              pChars := 18,
	                              Cnt := 5,
	                              Strg => #s);
	                #RivetData.LastTime := STRING_TO_REAL(IN := #s) * 1.0;
	                
	                Chars_TO_Strg(Chars := #ethComm.recData,
	                              pChars := 35,
	                              Cnt := 5,
	                              Strg => #s);
	                #RivetData.LastZ1 := STRING_TO_REAL(IN := #s);
	                
	                Chars_TO_Strg(Chars := #ethComm.recData,
	                              pChars := 44,
	                              Cnt := 5,
	                              Strg => #s);
	                #RivetData.LastZ2 := STRING_TO_REAL(IN := #s);
	                
	                Chars_TO_Strg(Chars := #ethComm.recData,
	                              pChars := 53,
	                              Cnt := 5,
	                              Strg => #s);
	                #RivetData.LastH1 := STRING_TO_REAL(IN := #s);
	                
	                Chars_TO_Strg(Chars := #ethComm.recData,
	                              pChars := 62,
	                              Cnt := 5,
	                              Strg => #s);
	                #RivetData.LastH2 := STRING_TO_REAL(IN := #s);
	            END_IF;
	        END_IF;
	    END_REGION
	END_REGION
	
	
END_FUNCTION_BLOCK

